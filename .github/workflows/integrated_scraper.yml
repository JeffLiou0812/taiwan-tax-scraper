name: Integrated Tax Law Scraper

# 錯誤防護：明確定義權限（避免 exit code 128）
permissions:
  contents: write
  issues: write
  actions: read

on:
  schedule:
    # 每天台灣時間 18:00 執行 (UTC 10:00)
    - cron: '0 10 * * *'
  workflow_dispatch:  # 允許手動觸發

jobs:
  scrape_all:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: 檢出程式碼
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # 獲取完整歷史記錄
    
    # Step 2: 設定 Python 環境
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    # Step 3: 安裝相依套件
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4 pandas lxml
        echo "✅ 套件安裝完成"
    
    # Step 4: 執行稅務函釋爬蟲
    - name: Run Tax Ruling Scraper
      id: tax_scraper
      continue-on-error: true  # 即使失敗也繼續執行
      run: |
        echo "🔍 開始爬取稅務函釋..."
        python smart_scraper.py
        echo "📊 稅務函釋爬蟲執行完成"
    
    # Step 5: 執行法規草案爬蟲
    - name: Run Draft Law Scraper
      id: draft_scraper
      continue-on-error: true  # 即使失敗也繼續執行
      run: |
        echo "📜 開始爬取法規草案..."
        python draft_law_scraper.py
        echo "📊 法規草案爬蟲執行完成"
    
    # Step 6: 建立整合通知
    - name: Create integrated notification
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let body = `# 📋 台灣稅務法規自動監控報告\n\n`;
          body += `🕐 **監控時間**: ${new Date().toLocaleString('zh-TW', {timeZone: 'Asia/Taipei'})}\n\n`;
          
          // 稅務函釋部分
          const hasTax = '${{ steps.tax_scraper.outputs.has_new_tax }}' === 'true';
          const taxCount = '${{ steps.tax_scraper.outputs.new_tax_count }}';
          
          if (hasTax) {
            body += `## 📄 稅務函釋更新\n\n`;
            body += `發現 **${taxCount}** 筆新函釋\n\n`;
            
            try {
              const taxFiles = fs.readdirSync('data').filter(f => f.startsWith('today_new'));
              if (taxFiles.length > 0) {
                const latestTax = taxFiles.sort().pop();
                const taxData = JSON.parse(fs.readFileSync(`data/${latestTax}`, 'utf8'));
                
                taxData.slice(0, 5).forEach((item, i) => {
                  body += `${i + 1}. **${item.title}**\n`;
                  body += `   - 日期: ${item.date}\n`;
                  body += `   - 字號: ${item.number}\n`;
                  if (item.url) {
                    body += `   - 🔗 [查看原文](${item.url})\n`;
                  }
                  body += `\n`;
                });
                
                if (taxData.length > 5) {
                  body += `\n*還有 ${taxData.length - 5} 筆函釋，請查看完整報告檔案*\n\n`;
                }
              }
            } catch (error) {
              console.log('讀取稅務函釋資料時出錯:', error);
              body += `無法讀取詳細資料，請查看 artifacts 中的檔案\n\n`;
            }
          } else {
            body += `## 📄 稅務函釋更新\n\n✨ 沒有新的稅務函釋\n\n`;
          }
          
          // 法規草案部分 - 改進版URL顯示
          const hasDraft = '${{ steps.draft_scraper.outputs.has_new_draft }}' === 'true';
          const draftCount = '${{ steps.draft_scraper.outputs.new_draft_count }}';
          
          if (hasDraft) {
            body += `## 📜 法規草案更新\n\n`;
            body += `發現 **${draftCount}** 筆新草案\n\n`;
            
            try {
              const draftFiles = fs.readdirSync('data').filter(f => f.startsWith('drafts_'));
              if (draftFiles.length > 0) {
                const latestDraft = draftFiles.sort().pop();
                const draftData = JSON.parse(fs.readFileSync(`data/${latestDraft}`, 'utf8'));
                
                draftData.slice(0, 5).forEach((item, i) => {
                  body += `${i + 1}. **${item.title}**\n`;
                  body += `   - 公告日期: ${item.date}\n`;
                  body += `   - 截止日期: ${item.deadline}\n`;
                  body += `   - 狀態: ${item.status}\n`;
                  
                  // 智能URL顯示
                  if (item.url) {
                    if (item.url_type === 'original') {
                      body += `   - 🔗 [查看原文](${item.url})\n`;
                    } else if (item.url_type === 'search') {
                      body += `   - 🔍 [搜尋此草案](${item.url})\n`;
                    } else {
                      body += `   - 🔗 [相關連結](${item.url})\n`;
                    }
                  }
                  
                  // 添加備用連結
                  if (item.backup_urls) {
                    if (item.backup_urls.site) {
                      body += `   - 📌 [法規預告網站](${item.backup_urls.site})\n`;
                    }
                    if (item.backup_urls.join_search && item.url_type !== 'original') {
                      body += `   - 🏛️ [公共政策平台搜尋](${item.backup_urls.join_search})\n`;
                    }
                  }
                  
                  body += `\n`;
                });
                
                if (draftData.length > 5) {
                  body += `\n*還有 ${draftData.length - 5} 筆草案，請查看完整報告檔案*\n\n`;
                }
                
                // 添加使用提示
                body += `### 💡 使用提示\n`;
                body += `- 🔗 **查看原文**: 直接連結到草案頁面\n`;
                body += `- 🔍 **搜尋此草案**: Google搜尋該草案相關資訊\n`;
                body += `- 📌 **法規預告網站**: 財政部法規預告主頁面\n`;
                body += `- 🏛️ **公共政策平台**: 政府政策參與平台搜尋\n\n`;
                
              }
            } catch (error) {
              console.log('讀取法規草案資料時出錯:', error);
              body += `無法讀取詳細資料，請查看 artifacts 中的檔案\n\n`;
            }
          } else {
            body += `## 📜 法規草案更新\n\n✨ 沒有新的法規草案\n\n`;
          }
          
          // 執行狀態摘要
          body += `## 🔍 執行狀態\n\n`;
          body += `- 稅務函釋爬蟲: ${{ steps.tax_scraper.outcome }}\n`;
          body += `- 法規草案爬蟲: ${{ steps.draft_scraper.outcome }}\n\n`;
          
          // 資料檔案說明
          body += `## 📁 資料檔案\n\n`;
          body += `完整的監控資料已上傳至 Artifacts，包含：\n`;
          body += `- JSON 格式的原始資料\n`;
          body += `- CSV 格式的表格資料\n`;
          body += `- 歷史記錄和比對結果\n\n`;
          
          body += `---\n`;
          body += `*此報告由自動化系統生成*`;
          
          // 只在有新資料時建立 Issue
          const shouldCreateIssue = hasTax || hasDraft;
          
          if (shouldCreateIssue) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `稅務法規監控報告 - ${new Date().toLocaleDateString('zh-TW')}`,
              body: body,
              labels: ['auto-update', 'tax-law']
            });
            
            console.log('✅ 通知已建立');
          } else {
            console.log('📝 無新資料，跳過通知建立');
          }
    
    # Step 7: 上傳資料檔案
    - name: Upload artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: scraping-results-${{ github.run_number }}
        path: |
          data/*.json
          data/*.csv
        retention-days: 30
    
    # Step 8: 提交歷史記錄到 repository
    - name: Commit history files
      if: always()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 只提交歷史檔案，避免重複提交大量資料
        git add data/*history.json data/*report.json 2>/dev/null || true
        
        if git diff --staged --quiet; then
          echo "沒有變更需要提交"
        else
          git commit -m "Update scraping history - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
          echo "✅ 歷史記錄已更新"
        fi
    
    # Step 9: 執行摘要
    - name: Show execution summary
      if: always()
      run: |
        echo "========================================"
        echo "📊 執行摘要"
        echo "========================================"
        echo "稅務函釋："
        echo "  - 執行狀態: ${{ steps.tax_scraper.outcome }}"
        echo "  - 新增數量: ${{ steps.tax_scraper.outputs.new_tax_count }}"
        echo ""
        echo "法規草案："
        echo "  - 執行狀態: ${{ steps.draft_scraper.outcome }}"
        echo "  - 新增數量: ${{ steps.draft_scraper.outputs.new_draft_count }}"
        echo ""
        echo "整體狀態: ${{ job.status }}"
        echo "========================================"
